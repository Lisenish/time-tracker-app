// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/dmitry.ivanov/Repositories/test_apps/time-tracker-app/api/store/store.go

// Package mock is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Lisenish/time-tracker-app/api/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTimeLogStore is a mock of TimeLogStore interface
type MockTimeLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockTimeLogStoreMockRecorder
}

// MockTimeLogStoreMockRecorder is the mock recorder for MockTimeLogStore
type MockTimeLogStoreMockRecorder struct {
	mock *MockTimeLogStore
}

// NewMockTimeLogStore creates a new mock instance
func NewMockTimeLogStore(ctrl *gomock.Controller) *MockTimeLogStore {
	mock := &MockTimeLogStore{ctrl: ctrl}
	mock.recorder = &MockTimeLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeLogStore) EXPECT() *MockTimeLogStoreMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockTimeLogStore) Save(ctx context.Context, timelog domain.TimeLog) (domain.TimeLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, timelog)
	ret0, _ := ret[0].(domain.TimeLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockTimeLogStoreMockRecorder) Save(ctx, timelog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTimeLogStore)(nil).Save), ctx, timelog)
}

// ListAllByDates mocks base method
func (m *MockTimeLogStore) ListAllByDates(ctx context.Context, from, to time.Time) ([]domain.TimeLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllByDates", ctx, from, to)
	ret0, _ := ret[0].([]domain.TimeLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllByDates indicates an expected call of ListAllByDates
func (mr *MockTimeLogStoreMockRecorder) ListAllByDates(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllByDates", reflect.TypeOf((*MockTimeLogStore)(nil).ListAllByDates), ctx, from, to)
}
